apiVersion: apps/v1
kind: Deployment
metadata:
  name: client-deploy
  labels:
    app: client
spec:
  replicas: 2
  selector:
    matchLabels:
      container: client
  template:
    metadata:
      labels:
        container: client
    spec:
      terminationGracePeriodSeconds: 2
      imagePullSecrets: 
        - name: monadic5559eb9a-auth
      containers:
      - name: docker-headless-vnc-epotes-cli
        image: monadic.azurecr.io/docker-headless-vnc-epotes-cli:latest
        imagePullPolicy: Always
        args:
          ### make normal UI startup to connect via: oc rsh <pod-name> bash
          # - '--tail-log'
          - '--debug'
        livenessProbe:
          ### checks the vncserver is up and running
          exec:
            command: 
              - /dockerstartup/liveness.sh
          initialDelaySeconds: 2
          timeoutSeconds: 1
        readinessProbe:
          ### checks if epoptes connection is working
          exec:
            command:
              - /dockerstartup/readyness.sh
          initialDelaySeconds: 2
          timeoutSeconds: 1
        resources:
          requests:
            memory: "100Mi"
            cpu: "100m"
          limits:
            memory: "1000Mi"
            cpu: "500m"
        env:
          - name: SKIP_NOVNC
            value: '1'
          - name: VNC_RESOLUTION
            value: '640x480'
          - name: EPOPTES_SERVER
            value: server-service-control
          - name: EPOPTES_PORT
            value: '789'
          - name: VNC_PW
            valueFrom:
              secretKeyRef:
                name: client
                key: vncpass
        volumeMounts:
          - mountPath: /dev/shm
            name: shm-vol
      volumes:
        - name: shm-vol
          emptyDir:
            medium: Memory
            sizeLimit: 256Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: server-deploy
  labels:
    app: server
spec:
  replicas: 1
  selector:
    matchLabels:
      container: server
  template:
    metadata:
      labels:
        container: server
    spec:
      terminationGracePeriodSeconds: 2
      imagePullSecrets: 
        - name: monadic5559eb9a-auth
      containers:
      - name: docker-headless-vnc-epotes-srv
        image: monadic.azurecr.io/docker-headless-vnc-epotes-srv:latest
        imagePullPolicy: Always
        args:
          ### make normal UI startup to connect via: oc rsh <pod-name> bash
          # - '--tail-log'
          - '--debug'
        livenessProbe:
          ### checks that vnc server is up and running
          tcpSocket:
            port: control
          initialDelaySeconds: 2
          timeoutSeconds: 1
        readinessProbe:
          ### checks if http-vnc connection is working
          httpGet:
            path: /
            port: remoting
            scheme: HTTP
          initialDelaySeconds: 2
          timeoutSeconds: 1
        ports:
          - containerPort: 6901
            protocol: TCP
            name: remoting
          - containerPort: 789
            protocol: TCP
            name: control
          - containerPort: 9876
            protocol: TCP
            name: reverse
        resources:
          requests:
            memory: "200Mi"
            cpu: "200m"
          limits:
            memory: "1000Mi"
            cpu: "500m"
        env:
          - name: VNC_PW
            valueFrom:
              secretKeyRef:
                name: server
                key: vncpass
        volumeMounts:
          - mountPath: /config
            name: config-vol
            readOnly: true
      volumes:
        - name: config-vol
          configMap:
            name: server
            items:
            - key: "kube-config"
              path: "kube-config"
---
apiVersion: v1
kind: Service
metadata:
  name: server-service-control
  labels:
    app: server
spec:
  selector:
    container: server
  ports:
  - name: control
    protocol: TCP
    port: 789
    targetPort: control
  - name: reverse
    protocol: TCP
    port: 9876
    targetPort: reverse
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: server-service-remoting
  labels:
    app: server
spec:
  selector:
    container: server
  ports:
  - name: webserver
    protocol: TCP
    port: 80
    targetPort: remoting
  type: LoadBalancer
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-public
  annotations:
    kubernetes.io/ingress.class: addon-http-application-routing
spec:
  rules:
  - host: browser.0aa78c09b01d40a79e18.westus2.aksapp.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: server-service-http
            port:
              number: 80
